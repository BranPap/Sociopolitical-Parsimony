  // Add filler articles (one from each political side for each filler topic)
  for (const fillerTopic of fillerChoicesThis) {
    // Get all articles for this filler topic
    const fillerArticles = jsArrayShuffled.filter(article => article.itemPair === fillerTopic);
    
    // Find one left-wing and one right-wing filler article
    const leftFiller = fillerArticles.find(article => article.wingBias === 'left');
    const rightFiller = fillerArticles.find(article => article.wingBias === 'right');
    
    if (leftFiller) stimulusArray.push(createStimulusObject(leftFiller));
    if (rightFiller) stimulusArray.push(createStimulusObject(rightFiller));
  }







/// LEXICAL DECISION TASK ///



let ageArray = ['seen','not seen']
shuffleArray(ageArray)

let leftValue = ageArray[0]
let rightValue = ageArray[1]


let lexicalDecisionTrainingData = [
        {
            stimulus: "apple",
            data: {
                category: "fruit"
            }
        },
        {
            stimulus: "strawberry",
            data: {
                category: "fruit"
            }
        },
        {
            stimulus: "carrot",
            data: {
                category: "vegetable"
            }
        },
        {
            stimulus: "broccoli",
            data: {
                category: "fruit"
            }
        }
]



const LexicalDecisionTrainingInstructions = {
        type: jsPsychHtmlKeyboardResponse,
        stimulus: `<div style="max-width: 1000px; margin: 0 auto; text-align: left;">
            Fantastic! Your next task involves categorizing words based using your keyboard. Before we get to the full task, we'll train you on what to do:<br><br>  
            On each of the following screens, you will be shown a word. 
            If this word is is a vegetable, press <b>'f'</b>. 
            If this word is a fruit, press <b>'j'.</b></p><p style = "text-align: center">When you are ready to begin, press 'j'</p></div>`,
        choices: ['j']}
        
const LexicalDecisionTraining = {
            timeline: [{
                type: jsPsychHtmlKeyboardResponse,
                choices: ['f','j'],
                stimulus: jsPsych.timelineVariable('stimulus'),
                prompt: `
                    <style>
                        /* Import a clean, modern sans-serif font */
                    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        
                    .modern-prompt {
                    background-color: white;
                    border-radius: 12px;
                    padding: 30px;
                    max-width: 800px;
                    margin: 20px auto;
                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
                    font-family: 'Inter', sans-serif;
                    }
        
                    .key-choice-container {
                    display: flex;
                    justify-content: center;
                    gap: 80px;
                    margin-top: 30px;
                    }
        
                    .key-choice {
                    background: #f9f9f9;
                    border-radius: 12px;
                    padding: 24px 36px;
                    text-align: center;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                    transition: all 0.2s ease;
                    }
        
        
                    .key-letter {
                    font-family: 'Inter', sans-serif;
                    font-size: 32px;
                    font-weight: 700;
                    margin: 0;
                    color: #333;
                    }
        
                    .key-label {
                    font-family: 'Inter', sans-serif;
                    font-weight: 600;
                    font-size: 16px;
                    margin: 10px 0 0 0;
                    color: #2563eb; /* Modern blue color */
                    }
        
                    /* Style the stimulus (which appears above the prompt) */
                    .jspsych-html-keyboard-response-stimulus {
                    font-family: 'Inter', sans-serif !important;
                    font-size: 32px !important;
                    font-weight: 600 !important;
                    color: #333 !important;
                    padding: 30px;
                    letter-spacing: -0.5px;
                    }
                    </style>
                    <div class="modern-prompt">
                        <div class="key-choice-container">
                            <div class="key-choice">
                                <p class="key-letter">f</p>
                                <p class="key-label">vegetable</p>
                            </div>
                            <div class="key-choice">
                                <p class="key-letter">j</p>
                                <p class="key-label">fruit</p>
                            </div>
                        </div>
                    </div>
                `,
                data: jsPsych.timelineVariable('data')
            }],
            timeline_variables: lexicalDecisionTrainingData,
            randomize_order: true,
            on_start: function(data) {
            },
            on_finish: function(data) {
                data.category = "LexicalDecisionTraining";
            }
        }

const LexicalDecisionInstructions = 
        {
            type: jsPsychHtmlKeyboardResponse,
    stimulus: `<div style="max-width: 1000px; margin: 0 auto; text-align: left;">
        Great work! You're ready to move onto the full task. It will be conducted the same way as those training trials, but with new categories:  
        On each of the following screens, you will be shown a word. 
        If you <b style= "color: #fdb02b"> have ${ageArray[0]}</b> the word in this study, please press <b style= "color: #fdb02b">'f'</b>. 
        If you <b style= "color: #4dc5fe"> have ${ageArray[1]}</b> the word in this study, please press <b style= "color: #4dc5fe">'j'.</b></p>
        <p style = "text-align: center">When you are ready to begin, press 'j'</p></div>`,
    choices: ['j']
        }

    
const LexicalDecision = {
            timeline: [{
                type: jsPsychHtmlKeyboardResponse,
                choices: ['j','f'],
                stimulus: jsPsych.timelineVariable('stimWord'),
                prompt: `
                <style>
                    /* Import a clean, modern sans-serif font */
                    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        
                    .modern-prompt {
                    background-color: white;
                    border-radius: 12px;
                    padding: 30px;
                    max-width: 800px;
                    margin: 20px auto;
                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
                    font-family: 'Inter', sans-serif;
                    }
        
                    .key-choice-container {
                    display: flex;
                    justify-content: center;
                    gap: 80px;
                    margin-top: 30px;
                    }
        
                    .key-choice {
                    background: #f9f9f9;
                    border-radius: 12px;
                    padding: 24px 36px;
                    text-align: center;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                    transition: all 0.2s ease;
                    }
        
                    .key-letter {
                    font-family: 'Inter', sans-serif;
                    font-size: 32px;
                    font-weight: 700;
                    margin: 0;
                    color: #333;
                    }
        
                    .key-label-left {
                    font-family: 'Inter', sans-serif;
                    font-weight: 600;
                    font-size: 16px;
                    margin: 10px 0 0 0;
                    color: #fdb02b; /* Modern blue color */
                    }

                    .key-label-right {
                    font-family: 'Inter', sans-serif;
                    font-weight: 600;
                    font-size: 16px;
                    margin: 10px 0 0 0;
                    color: #4dc5fe; 
                    }
        
                    /* Style the stimulus (which appears above the prompt) */
                    .jspsych-html-keyboard-response-stimulus {
                    font-family: 'Inter', sans-serif !important;
                    font-size: 32px !important;
                    font-weight: 600 !important;
                    color: #333 !important;
                    padding: 30px;
                    letter-spacing: -0.5px;
                    }
                    </style>
                    <div class="modern-prompt">
                        <div class="key-choice-container">
                            <div class="key-choice">
                                <p class="key-letter">f</p>
                                <p class="key-label-left">${ageArray[0]}</p>
                            </div>
                            <div class="key-choice">
                                <p class="key-letter">j</p>
                                <p class="key-label-right">${ageArray[1]}</p>
                            </div>
                        </div>
                    </div>
                `,
                data: jsPsych.timelineVariable('data')
            }],
            timeline_variables: lexicalDecisionStimuliTagged,
            randomize_order: true,
            on_start: function(data) {
            },
            on_finish: function(data) {
                evaluate_response(data, leftValue, rightValue);
                console.log(data.statusCheck)
                data.category = "LexicalDecision";
                data.ageArray = ageArray;
            }
        
        }



// ---------------------
// Tweet Production Task
// ---------------------

// Instructions 
const productionInstructions = {
  type: jsPsychHtmlButtonResponse,
  stimulus: '<div style="max-width: 1000px; margin: 0 auto; text-align: left;">Congratulations! You\'ve reached the final task of the experiment.<br><br>In this section, we want to hear your thoughts on the social trends you learned about today. On each screen, you\'ll see a news article about these trends. Your job is to write a tweet sharing the article. Express your opinions and use the words and concepts you learned today.</div>',
  choices: [`Let's tweet!`]
}

// ---------------------------
// Testing Zone 
// ---------------------------

const exposedTopics = stimChoicesThis;


var tweet_trial1 = {
  type: jsPsychTweetProduction,
  article_title: grabArticleTitle(exposedTopics[0]),
  article_summary: grabArticleByline(exposedTopics[0]),
  news_source: grabArticleSource(),
  required_words: [CriticalPair1Term1, CriticalPair1Term2],
  require_word_usage: true,
  max_attempts: 3,
  max_attempts_action: 'proceed',
  max_attempts_message: 'You have used all 3 attempts. Moving to the next trial.',
  data: {
    category: "tweet_production",
  }
};


var tweet_trial2 = {
  type: jsPsychTweetProduction,
  article_title: grabArticleTitle(exposedTopics[1]),
  article_summary: grabArticleByline(exposedTopics[1]),
  news_source: grabArticleSource(),
  required_words: [CriticalPair2Term1, CriticalPair2Term2],
  require_word_usage: true,
  max_attempts: 3,
  max_attempts_action: 'proceed',
  max_attempts_message: 'You have used all 3 attempts. Moving to the next trial.',
  data: {
    category: "tweet_production",
  }
};

productionTrials = shuffleArray([tweet_trial1, tweet_trial2]);


  // QUESTIONNAIRE //

  const demoSurvey = {
    type: jsPsychSurveyHtmlForm,
    html: "<style>#survey-container { font-family: 'Arial', sans-serif; line-height: 1.6; background-color: #f9f9f9; color: #333; margin: 0; padding: 20px; } #survey-container div { margin-bottom: 20px; padding: 15px; background: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); } #survey-container p { font-size: 16px; font-weight: bold; margin-bottom: 10px; } #survey-container input[type='radio'] { margin-right: 10px; } #survey-container select, #survey-container input[type='text'], #survey-container textarea { font-size: 14px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; width: 100%; box-sizing: border-box; } #survey-container textarea { resize: vertical; } #survey-container label { display: block; margin-bottom: 5px; font-size: 14px; } #survey-container select { background: #fff; } #survey-container input[type='radio'] + label, #survey-container input[type='radio']:last-of-type { margin-right: 15px; }</style><div id='survey-container'><div><p>Did you read the instructions and do you think you did the task correctly?</p><label><input type='radio' name='correct' value='Yes'> Yes</label><label><input type='radio' name='correct' value='No'> No</label><label><input type='radio' name='correct' value='I was confused'> I was confused</label></div><div><p>How would you describe your political beliefs?</p><label><input type='radio' name='political' value='Progressive'> Progressive</label><label><input type='radio' name='political' value='Moderate'> Moderate</label><label><input type='radio' name='political' value='Conservative'> Conservative</label><label><input type='radio' name='political' value='Independent'> Independent</label></div><div><p>American political affiliation:</p><label><input type='radio' name='us_affiliation' value='Democrat'> Democrat</label><label><input type='radio' name='us_affiliation' value='Republican'> Republican</label><label><input type='radio' name='us_affiliation' value='Libertarian'> Libertarian</label><label><input type='radio' name='us_affiliation' value='Green Party'> Green Party</label><label><input type='radio' name='us_affiliation' value='Independent/Other'> Independent/Other</label><label><input type='radio' name='us_affiliation' value='Prefer not to say'> Prefer not to say</label></div><div><p>Gender:</p><select name='gender'><option value='null'> </option><option value='Female'>Female</option><option value='Male'>Male</option><option value='Non-binary/Non-conforming'>Non-binary/Non-conforming</option><option value='Other'>Other</option></select></div><div><p>Age:</p><input type='text' name='age' size='10'></div><div><p>Level of education:</p><select name='education'><option value='null'> </option><option value='Some high school'>Some high school</option><option value='Graduated high school'>Graduated high school</option><option value='Some college'>Some college</option><option value='Graduated college'>Graduated college</option><option value='Hold a higher degree'>Hold a higher degree</option></select></div><div><p>Do you think the payment was fair?</p><select name='payment'><option value='null'> </option><option value='The payment was too low'>The payment was too low</option><option value='The payment was fair'>The payment was fair</option></select></div><div><p>Did you enjoy the experiment?</p><select name='enjoy'><option value='null'> </option><option value='Worse than the average experiment'>Worse than the average experiment</option><option value='An average experiment'>An average experiment</option><option value='Better than the average experiment'>Better than the average experiment</option></select></div><div><p>Do you have any other comments about this experiment?</p><textarea name='comments' cols='30' rows='4'></textarea></div></div>",
    on_finish: function(data) {
      data.category = "demoSurvey";
    }
  }
  

const exit_fullscreen = {
  type: jsPsychFullscreen,
  fullscreen_mode: false,
  delay_after: 0
}

// THANKS //

const thanks = {
    type: jsPsychHtmlButtonResponse,
    choices: ['Continue'],
    stimulus: "Thank you for your time! Please click 'Continue' and then wait a moment until you're directed back to Prolific.<br><br>",
    on_finish: function(data) {
        data.category = "thanks"
    }
}


// Add the conditional for the rest of experiment
const conditionalRemainder = {
    timeline: [
    LexicalDecisionTrainingInstructions,
    LexicalDecisionTraining,
    LexicalDecisionInstructions,
    LexicalDecision,
    productionInstructions,
    productionTrials[0],
    productionTrials[1],
    demoSurvey,
    exit_fullscreen,
    thanks
    ],
    conditional_function: function() {
      return true
    }
  };

// Update the timeline
timeline.push(conditionalRemainder)
